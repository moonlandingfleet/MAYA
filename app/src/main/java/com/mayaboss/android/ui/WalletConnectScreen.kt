package com.mayaboss.android.ui

import android.graphics.Bitmap // Keep for now, though QR might be disabled
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap // Keep for now
import androidx.compose.ui.unit.dp
// import com.google.zxing.BarcodeFormat // Temporarily unused
// import com.journeyapps.barcodescanner.BarcodeEncoder // Temporarily unused
import com.mayaboss.android.viewmodel.MAYAViewModel
import timber.log.Timber

@Composable
fun WalletConnectScreen(viewModel: MAYAViewModel, onBack: () -> Unit) {
    // var uri by remember { mutableStateOf<String?>(null) } // uri is no longer generated by viewModel.connectWallet
    // var isConnected by remember { mutableStateOf(false) } // Connection status should come from viewModel.walletSession
    var displayMessage by remember { mutableStateOf<String?>("WalletConnect QR Code flow: Under Review as per Royal Charter.") }

    LaunchedEffect(Unit) {
        // The ViewModel's connectWallet signature has changed.
        // It now expects address and chainId for direct backend session registration.
        // The onUri/onError callback mechanism for QR code generation is no longer supported by this specific ViewModel function.
        // Full WalletConnect v2 SDK integration for QR pairing is a separate TODO.
        Timber.d("WalletConnectScreen: LaunchedEffect. Current viewModel.connectWallet is for direct registration, not QR URI.")
        // viewModel.connectWallet("PLACEHOLDER_ADDRESS", "PLACEHOLDER_CHAINID") // Example placeholder call if we wanted to test direct registration from here
        // For now, this screen will just show a message.
    }

    val walletSession by viewModel.walletSession.collectAsState()

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // Back button
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.Start
        ) {
            Button(onClick = onBack) {
                Text("← Back")
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        Text("🔌 Connect Your Wallet", style = MaterialTheme.typography.headlineMedium)
        Spacer(modifier = Modifier.height(16.dp))

        // Display current connection status from ViewModel
        if (walletSession?.connected == true) {
            Text("Status: Connected to MAYA Backend", color = MaterialTheme.colorScheme.primary)
            Text("Address: ${walletSession?.address}")
            Text("Session ID: ${walletSession?.sessionId}")
        } else {
            Text("Status: Not Connected to MAYA Backend")
        }

        Spacer(modifier = Modifier.height(16.dp))

        // QR Code display logic is removed as 'uri' is no longer generated by this flow.
        // The UI below was for displaying a QR code from a 'uri'.
        // When WalletConnect v2 SDK is integrated, this UI part will be re-enabled/re-implemented.
        Text(
            text = displayMessage ?: "Waiting for connection details...",
            style = MaterialTheme.typography.bodyLarge
        )
        Text(
            "Full QR Code scanning and WalletConnect v2 SDK integration is pending as per the Royal Charter.",
            style = MaterialTheme.typography.bodyMedium,
            modifier = Modifier.padding(top = 8.dp)
        )


        // uri?.let { wcUri ->
        //     val bitmap = remember(wcUri) {
        //         try {
        //             BarcodeEncoder().encodeBitmap(wcUri, BarcodeFormat.QR_CODE, 400, 400)
        //         } catch (e: Exception) {
        //             null
        //         }
        //     }
        //
        //     bitmap?.let {
        //         Image(
        //             bitmap = it.asImageBitmap(),
        //             contentDescription = "WalletConnect QR Code",
        //             modifier = Modifier.size(300.dp)
        //         )
        //     } ?: Text("Error generating QR Code")
        // } ?: if (displayMessage != null) { // Changed from errorMessage
        //    Text(displayMessage!!)
        // } else {
        //    Text("Attempting to connect...") // Changed message
        // }

        Spacer(modifier = Modifier.height(16.dp))
        Text(
            "The method for connecting via QR code will be restored during full WalletConnect SDK integration.",
            style = MaterialTheme.typography.bodySmall
        )
    }
}